#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node *root;

// Функция для создания дерева, исключая добавление одинаковых элементов
struct Node *CreateTree(struct Node *root, struct Node *r, int data) {
    if (r == NULL) {
        r = (struct Node *)malloc(sizeof(struct Node));
        if (r == NULL) {
            printf("Ошибка выделения памяти\n");
            exit(0);
        }
        r->left = NULL;
        r->right = NULL;
        r->data = data;
        if (root == NULL) return r;
        if (data > root->data)
            root->left = r;
        else
            root->right = r;
        return r;
    }
    if (data == r->data) {
        printf("Элемент %d уже существует в дереве.\n", data);
        return root;
    }
    if (data > r->data)
        r->left = CreateTree(r, r->left, data);
    else
        r->right = CreateTree(r, r->right, data);
    return root;
}

// Функция для поиска значения в дереве
struct Node *Search(struct Node *r, int data) {
    if (r == NULL || r->data == data)
        return r;
    if (data > r->data)
        return Search(r->left, data);
    else
        return Search(r->right, data);
}

// Функция для подсчёта числа вхождений заданного элемента в дерево
int CountOccurrences(struct Node *r, int data) {
    if (r == NULL)
        return 0;
    int count = (r->data == data) ? 1 : 0;
    return count + CountOccurrences(r->left, data) + CountOccurrences(r->right, data);
}

// Функция для печати дерева
void print_tree(struct Node *r, int l) {
    if (r == NULL) {
        return;
    }
    print_tree(r->right, l + 1);
    for (int i = 0; i < l; i++) {
        printf(" ");
    }
    printf("%d\n", r->data);
    print_tree(r->left, l + 1);
}

// Функция для нахождения уровня элемента в дереве
int find_level(struct Node *r, int data, int level) {
    if (r == NULL)
        return -1;
    if (r->data == data)
        return level;
    int left_level = find_level(r->left, data, level + 1);
    if (left_level != -1)
        return left_level;
    return find_level(r->right, data, level + 1);
}

int main() {
    setlocale(LC_ALL, ""); // Установка локали
    int D, start = 1;
    root = NULL;
    printf("-1 - окончание построения дерева\n");
    while (start) {
        printf("Введите число: ");
        scanf("%d", &D);
        if (D == -1) {
            printf("Построение дерева окончено\n\n");
            start = 0;
        } else {
            root = CreateTree(root, root, D);
        }
    }
    print_tree(root, 0);

    // Поиск значения
    printf("Введите число для поиска: ");
    scanf("%d", &D);
    struct Node *found = Search(root, D);
    if (found != NULL) {
        printf("Значение %d найдено в дереве.\n", D);
        // Поиск уровня элемента
        int level = find_level(root, D, 0);
        printf("Уровень значения %d: %d\n", D, level);
    } else {
        printf("Значение %d не найдено в дереве.\n", D);
    }

    // Подсчет числа вхождений
    printf("Введите число для подсчета вхождений: ");
    scanf("%d", &D);
    int occurrences = CountOccurrences(root, D);
    printf("Число вхождений %d в дерево: %d\n", D, occurrences);

    return 0;
}
