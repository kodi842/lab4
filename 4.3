#include <stdio.h>
#include <stdlib.h>

// Определение структуры узла дерева
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Функция для создания нового узла
Node* newNode(int data) {
    Node* temp = (Node*)malloc(sizeof(Node));
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}

// Функция для вставки нового узла в бинарное дерево (исключая дубликаты)
Node* insert(Node* node, int data) {
    if (node == NULL) {
        return newNode(data);
    }
    if (data < node->data) {
        node->left = insert(node->left, data);
    } else if (data > node->data) {
        node->right = insert(node->right, data);
    }
    // Если данные равны, не вставляем дубликат
    return node;
}

// Функция для поиска значения в бинарном дереве
Node* search(Node* root, int key) {
    if (root == NULL || root->data == key) {
        return root;
    }
    if (root->data < key) {
        return search(root->right, key);
    }
    return search(root->left, key);
}

// Функция для подсчёта числа вхождений заданного элемента
int countOccurrences(Node* root, int key) {
    if (root == NULL) {
        return 0;
    }
    int count = 0;
    if (root->data == key) {
        count = 1;
    }
    return count + countOccurrences(root->left, key) + countOccurrences(root->right, key);
}

int main() {
    Node* root = NULL;
    int n, value, searchValue;

    printf("Введите количество узлов: ");
    scanf("%d", &n);

    printf("Введите значения узлов:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &value);
        root = insert(root, value);
    }

    printf("Введите значение для поиска: ");
    scanf("%d", &searchValue);

    int count = countOccurrences(root, searchValue);
    printf("Значение %d найдено в дереве %d раз(а).\n", searchValue, count);

    return 0;
}
